import java.util.*;

public class Main {
    public static Scanner scn = new Scanner(System.in);

    public static class TreeNode {
        int val = 0;
        TreeNode left = null;
        TreeNode right = null;

        TreeNode(int val) {
            this.val = val;
        }
    }
    public static int left =0;
    public static int right =0;
    static class Pair{
        TreeNode node;
        int count;
        public Pair(TreeNode node,int count){
            this.node = node;
            this.count = count;
        }
    }
    public static int width(TreeNode root){
        Queue<Pair> qu = new LinkedList<>();
        qu.add(new Pair(root,0));
        while(qu.size()>0){
            Pair rem = qu.remove();
            int c = rem.count;
            if(rem.node.left!=null){
                qu.add(new Pair(rem.node.left,c-1));
            }
            if(rem.node.right!=null){
                qu.add(new Pair(rem.node.right,c+1));
            }
            
            if(c<left){
                left = c;
            }
            if(c>right){
                right = c;
            }
        }
        return right-left+1;
    }
    public static ArrayList<Integer> TopView(TreeNode root) {
        int wd = width(root);
        ArrayList<Integer> res = new ArrayList<>();
        for(int i=0;i<wd;i++){
            res.add(null);
        }
        
        Queue<Pair> qu = new LinkedList<>();
        qu.add(new Pair(root,Math.abs(left)));
        while(qu.size()>0){
            Pair rem = qu.remove();
            if(res.get(rem.count)==null){
                res.set(rem.count,rem.node.val);
            }
            
            if(rem.node.left!=null){
                qu.add(new Pair(rem.node.left,rem.count-1));
            }
            if(rem.node.right!=null){
                qu.add(new Pair(rem.node.right,rem.count+1));
            }
        }
        return res;

    }

    // input_section=================================================

    public static TreeNode createTree(int[] arr, int[] IDX) {
        if (IDX[0] > arr.length || arr[IDX[0]] == -1) {
            IDX[0]++;
            return null;
        }
        TreeNode node = new TreeNode(arr[IDX[0]++]);
        node.left = createTree(arr, IDX);
        node.right = createTree(arr, IDX);

        return node;
    }

    public static void solve() {
        int n = scn.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++)
            arr[i] = scn.nextInt();

        int[] IDX = new int[1];
        TreeNode root = createTree(arr, IDX);

        ArrayList<Integer> ans = TopView(root);
        for (Integer i : ans)
            System.out.print(i + " ");

    }

    public static void main(String[] args) {
        solve();
    }
}
