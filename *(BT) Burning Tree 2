import java.util.*;

public class Main {
  public static Scanner scn = new Scanner(System.in);

  public static class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    TreeNode(int val) {
      this.val = val;
    }
  }
  public static ArrayList<TreeNode> node2root(TreeNode root,int fireNode){
      ArrayList<TreeNode> myres = new ArrayList<>();
      if(root == null){
          return myres;
      }
      
      if(root.val == fireNode){
          myres.add(root);
          return myres;
      }
      
      ArrayList<TreeNode> lres = node2root(root.left,fireNode);
      if(lres.size()>0){
          lres.add(root);
          return lres;
      }
      ArrayList<TreeNode> rres = node2root(root.right,fireNode);
      if(rres.size()>0){
          rres.add(root);
          return rres;
      }
      
      return myres;
      
      
  }
   private static void burningTree_1(TreeNode node, TreeNode blockage, 
                            int time, ArrayList<ArrayList<Integer>> res) {
        if(node == null || node == blockage) return;

        if(time < res.size()) {
            res.get(time).add(node.val);
        } else {
            // time == res.size()
            ArrayList<Integer> subres = new ArrayList<>();
            subres.add(node.val);
            res.add(subres);
        }

        burningTree_1(node.left, blockage, time + 1, res);
        burningTree_1(node.right, blockage, time + 1, res);
    }

  public static ArrayList<ArrayList<Integer>> burningTree(TreeNode root, int data) {
       ArrayList<TreeNode> n2rpath = node2root(root, data);
       TreeNode blockage = null;
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
 
        for(int t = 0; t < n2rpath.size(); t++) {
            TreeNode node = n2rpath.get(t);
            burningTree_1(node, blockage, t, res);
            blockage = node;
        }
        return res;

  }

  // input_section=================================================

  public static TreeNode createTree(int[] arr, int[] IDX) {
    if (IDX[0] > arr.length || arr[IDX[0]] == -1) {
      IDX[0]++;
      return null;
    }
    TreeNode Treenode = new TreeNode(arr[IDX[0]++]);
    Treenode.left = createTree(arr, IDX);
    Treenode.right = createTree(arr, IDX);

    return Treenode;
  }

  public static void solve() {
    int n = scn.nextInt();
    int[] arr = new int[n];
    for (int i = 0; i < n; i++)
      arr[i] = scn.nextInt();

    int[] IDX = new int[1];
    TreeNode root = createTree(arr, IDX);
    int fireNode = scn.nextInt();

    ArrayList<ArrayList<Integer>> ans = burningTree(root, fireNode);
    if (ans.size() == 0)
      System.out.println();
    for (ArrayList<Integer> ar : ans) {
      for (Integer ele : ar)
        System.out.print(ele + " ");
      System.out.println();
    }
  }

  public static void main(String[] args) {
    solve();
  }
}
