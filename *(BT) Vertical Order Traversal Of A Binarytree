import java.util.*;

public class Main {
    public static Scanner scn = new Scanner(System.in);

    public static class TreeNode {
        int val = 0;
        TreeNode left = null;
        TreeNode right = null;

        TreeNode(int val) {
            this.val = val;
        }
    }
    public static class Pair{
        TreeNode node;
        int count;
        public Pair(TreeNode node,int count){
            this.node = node;
            this.count = count;
        }
    }
    public static ArrayList<ArrayList<Integer>> verticalOrderTraversal(TreeNode root) {
        HashMap<Integer,ArrayList<Integer>> map = new HashMap<>();
        Queue<Pair> qu = new LinkedList<>();
        qu.add(new Pair(root,0));
        int left=0,right=0;
        while(qu.size()>0){
        
        
            
                Pair rem = qu.remove();
                int c = rem.count;
                if(map.containsKey(c)){
                    map.get(c).add(rem.node.val);
                }else{
                    ArrayList<Integer> list = new ArrayList<>();
                    list.add(rem.node.val);
                    map.put(c,list);
                }
                if(c<left){
                    left = c;
                }
                if(c>right){
                    right = c;
                }
                if(rem.node.left!=null){
                    qu.add(new Pair(rem.node.left,c-1));
                }
                
                if(rem.node.right!=null){
                    qu.add(new Pair(rem.node.right,c+1));
                }
                
            
        }
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        for(int i = left;i<=right;i++){
            ArrayList<Integer> temp = map.get(i);
            res.add(temp);
        }
        return res;

    }

    // input_section=================================================

    public static TreeNode createTree(int[] arr, int[] IDX) {
        if (IDX[0] > arr.length || arr[IDX[0]] == -1) {
            IDX[0]++;
            return null;
        }
        TreeNode node = new TreeNode(arr[IDX[0]++]);
        node.left = createTree(arr, IDX);
        node.right = createTree(arr, IDX);

        return node;
    }

    public static void solve() {
        int n = scn.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++)
            arr[i] = scn.nextInt();

        int[] IDX = new int[1];
        TreeNode root = createTree(arr, IDX);

        ArrayList<ArrayList<Integer>> ans = verticalOrderTraversal(root);
        int idx = 0;
        for (ArrayList<Integer> i : ans) {
            System.out.print(idx++ + " -> ");
            for (Integer j : i)
                System.out.print(j + " ");
            System.out.println();
        }
    }

    public static void main(String[] args) {
        solve();
    }
}
