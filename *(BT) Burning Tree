import java.util.*;

public class Main {
  public static Scanner scn = new Scanner(System.in);

  public static class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    TreeNode(int val) {
      this.val = val;
    }
  }
  public static ArrayList<TreeNode> node2root(TreeNode root,int fireNode){
      ArrayList<TreeNode> myres = new ArrayList<>();
      if(root == null){
          return myres;
      }
      
      if(root.val == fireNode){
          myres.add(root);
          return myres;
      }
      
      ArrayList<TreeNode> lres = node2root(root.left,fireNode);
      if(lres.size()>0){
          lres.add(root);
          return lres;
      }
      ArrayList<TreeNode> rres = node2root(root.right,fireNode);
      if(rres.size()>0){
          rres.add(root);
          return rres;
      }
      
      return myres;
      
      
  }
  public static int maxTime = 0;
  public static void burn(TreeNode node,TreeNode blockage,int time){
      if(node == null || node == blockage){
          return;
      }
      maxTime = Math.max(maxTime,time);
      burn(node.left,blockage,time+1);
      burn(node.right,blockage,time+1);
  }

  public static int burningTree(TreeNode root, int fireNode) {
      ArrayList<TreeNode> path = node2root(root,fireNode);
      TreeNode blockage = null;
      for(int i=0;i<path.size();i++){
          TreeNode temp = path.get(i);
          burn(temp,blockage,i);
          blockage = temp;
      }
      return maxTime;

  }

  // input_section=================================================

  public static TreeNode createTree(int[] arr, int[] IDX) {
    if (IDX[0] > arr.length || arr[IDX[0]] == -1) {
      IDX[0]++;
      return null;
    }
    TreeNode Treenode = new TreeNode(arr[IDX[0]++]);
    Treenode.left = createTree(arr, IDX);
    Treenode.right = createTree(arr, IDX);

    return Treenode;
  }

  public static void solve() {
    int n = scn.nextInt();
    int[] arr = new int[n];
    for (int i = 0; i < n; i++)
      arr[i] = scn.nextInt();

    int[] IDX = new int[1];
    TreeNode root = createTree(arr, IDX);
    int fireNode = scn.nextInt();

    int ans = burningTree(root, fireNode);
    System.out.println(ans);

  }

  public static void main(String[] args) {
    solve();
  }
}
