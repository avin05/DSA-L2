import java.util.Scanner;

public class Main {
  public static Scanner scn = new Scanner(System.in);

  public static class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    TreeNode(int val) {
      this.val = val;
    }
  }
  public static class pair{
      int LTLMaxsum = -(int)1e9-1;
      int NTLMaxsum = -(int)1e9-1;
  }
  public static pair maxPath(TreeNode root){
      pair myAns = new pair();
      if(root == null){
          return myAns;
      }
      
      if(root.left == null && root.right == null){
          myAns.NTLMaxsum = root.val;
          return myAns;
      }
      
      pair lp = maxPath(root.left);
      pair rp = maxPath(root.right);
      
      myAns.LTLMaxsum = Math.max(lp.LTLMaxsum,rp.LTLMaxsum);
      
      if(root.left!=null && root.right!=null){
          myAns.LTLMaxsum = Math.max(myAns.LTLMaxsum,lp.NTLMaxsum+root.val+rp.NTLMaxsum);
      }
      
      myAns.NTLMaxsum = Math.max(lp.NTLMaxsum,rp.NTLMaxsum)+root.val;
      
      return myAns;
  }
  public static int maxPathSum(TreeNode root) {
    return maxPath(root).LTLMaxsum;
  }

  // input_Section=================================================

  public static TreeNode createTree(int[] arr, int[] IDX) {
    if (IDX[0] > arr.length || arr[IDX[0]] == -1) {
      IDX[0]++;
      return null;
    }

    TreeNode node = new TreeNode(arr[IDX[0]++]);
    node.left = createTree(arr, IDX);
    node.right = createTree(arr, IDX);

    return node;
  }

  public static void solve() {
    int n = scn.nextInt();
    int[] arr = new int[n];
    for (int i = 0; i < n; i++)
      arr[i] = scn.nextInt();

    int[] IDX = new int[1];
    TreeNode root = createTree(arr, IDX);
    System.out.println(maxPathSum(root));
  }

  public static void main(String[] args) {
    solve();
  }
}
